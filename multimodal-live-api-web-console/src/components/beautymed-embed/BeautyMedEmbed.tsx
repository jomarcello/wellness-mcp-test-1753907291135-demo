/**
 * BeautyMed Clinic Voice Assistant Embed Component
 * Simplified voice agent specifically for BeautyMed clinic appointments
 */

import { useEffect, useState } from "react";
import { useLiveAPIContext } from "../../contexts/LiveAPIContext";
import AudioPulse from "../audio-pulse/AudioPulse";
import "./beautymed-embed.scss";

export default function BeautyMedEmbed() {
  const { client, connected, connect, disconnect, setConfig } = useLiveAPIContext();
  const [isConnecting, setIsConnecting] = useState(false);
  const [response, setResponse] = useState<string>('‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞! ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà BeautyMed Clinic ‡∏î‡∏¥‡∏â‡∏±‡∏ô Robin ‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏∞');

  // Configure for BeautyMed clinic
  useEffect(() => {
    setConfig({
      model: "models/gemini-2.0-flash-exp",
      systemInstruction: {
        parts: [
          {
            text: `‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ Robin ‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á BeautyMed Clinic ‡∏Ñ‡∏•‡∏¥‡∏ô‡∏¥‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏á‡∏≤‡∏° 
            
            ‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏û‡∏π‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£
            
            ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:
            1. ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏ö‡∏≠‡∏∏‡πà‡∏ô
            2. ‡∏ä‡πà‡∏ß‡∏¢‡∏à‡∏≠‡∏á‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏•‡∏¥‡∏ô‡∏¥‡∏Å
            3. ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡∏á‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏•‡∏¥‡∏ô‡∏¥‡∏Å
            4. ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤
            5. ‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢
            
            ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏•‡∏¥‡∏ô‡∏¥‡∏Å:
            - ‡∏â‡∏µ‡∏î‡πÇ‡∏ö‡∏ó‡πá‡∏≠‡∏Å‡∏ã‡πå
            - ‡∏ü‡∏¥‡∏•‡πÄ‡∏•‡∏≠‡∏£‡πå
            - ‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏™‡∏¥‡∏ß
            - ‡πÄ‡∏•‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏Å‡∏≥‡∏à‡∏±‡∏î‡∏Ç‡∏ô
            - ‡∏ü‡∏≠‡πÇ‡∏ï‡πÄ‡∏ü‡πÄ‡∏ä‡∏µ‡∏¢‡∏•
            - ‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏ú‡∏¥‡∏ß‡∏´‡∏ô‡πâ‡∏≤
            
            ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏Å‡∏≤‡∏£: ‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå-‡πÄ‡∏™‡∏≤‡∏£‡πå 9:00-18:00
            
            ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏™‡∏±‡πâ‡∏ô‡πÜ ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö ‡πÅ‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏ï‡πá‡∏°‡∏ó‡∏µ‡πà`
          },
        ],
      },
      generationConfig: {
        responseModalities: ["audio"],
        speechConfig: {
          voiceConfig: {
            prebuiltVoiceConfig: {
              voiceName: "Aoede", // Female voice
            }
          }
        }
      }
    });
  }, [setConfig]);

  // Handle responses
  useEffect(() => {
    const onResponse = (data: any) => {
      console.log("BeautyMed received response:", data);
      if (data.text) {
        setResponse(data.text);
      }
    };

    const onConnected = () => {
      setIsConnecting(false);
    };

    const onDisconnected = () => {
      setIsConnecting(false);
    };

    client.on("response", onResponse);
    client.on("connected", onConnected);
    client.on("disconnected", onDisconnected);
    
    return () => {
      client.off("response", onResponse);
      client.off("connected", onConnected);
      client.off("disconnected", onDisconnected);
    };
  }, [client]);

  const handleConnect = async () => {
    if (connected) {
      disconnect();
    } else {
      setIsConnecting(true);
      try {
        await connect();
      } catch (error) {
        console.error("Connection error:", error);
        setIsConnecting(false);
      }
    }
  };

  const sendMessage = (text: string) => {
    if (connected) {
      client.send(text);
    }
  };

  return (
    <div className="beautymed-embed">
      {/* Header */}
      <div className="embed-header">
        <div className="clinic-logo">
          üíÑ BeautyMed Clinic
        </div>
        <div className="status-indicator">
          <span className={`status-dot ${connected ? 'connected' : 'disconnected'}`}></span>
          {connected ? '‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß' : '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠'}
        </div>
      </div>

      {/* Voice Controls */}
      <div className="voice-controls">
        <button
          className={`record-button ${connected ? 'connected' : ''} ${isConnecting ? 'connecting' : ''}`}
          onClick={handleConnect}
          disabled={isConnecting}
        >
          {isConnecting ? (
            <>
              <div className="spinner"></div>
              ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠...
            </>
          ) : connected ? (
            <>
              <AudioPulse />
              üéôÔ∏è ‡∏û‡∏π‡∏î‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢
            </>
          ) : (
            <>
              üé§ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏û‡∏π‡∏î
            </>
          )}
        </button>
      </div>

      {/* Response Display */}
      {response && (
        <div className="response-display">
          <div className="assistant-name">Robin:</div>
          <div className="response-text">{response}</div>
        </div>
      )}

      {/* Quick Actions */}
      <div className="quick-actions">
        <button 
          className="quick-action-btn"
          onClick={() => sendMessage("‡∏Ç‡∏≠‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏â‡∏µ‡∏î‡πÇ‡∏ö‡∏ó‡πá‡∏≠‡∏Å‡∏ã‡πå‡∏Ñ‡πà‡∏∞")}
          disabled={!connected}
        >
          ‡∏à‡∏≠‡∏á‡∏ô‡∏±‡∏î‡πÇ‡∏ö‡∏ó‡πá‡∏≠‡∏Å‡∏ã‡πå
        </button>
        <button 
          className="quick-action-btn"
          onClick={() => sendMessage("‡∏≠‡∏¢‡∏≤‡∏Å‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ü‡∏¥‡∏•‡πÄ‡∏•‡∏≠‡∏£‡πå‡∏Ñ‡πà‡∏∞")}
          disabled={!connected}
        >
          ‡∏ñ‡∏≤‡∏°‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ü‡∏¥‡∏•‡πÄ‡∏•‡∏≠‡∏£‡πå
        </button>
        <button 
          className="quick-action-btn"
          onClick={() => sendMessage("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà‡∏Ñ‡πà‡∏∞")}
          disabled={!connected}
        >
          ‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤
        </button>
      </div>

      {/* Footer */}
      <div className="embed-footer">
        üïí ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏Å‡∏≤‡∏£: ‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå-‡πÄ‡∏™‡∏≤‡∏£‡πå 9:00-18:00
      </div>
    </div>
  );
}